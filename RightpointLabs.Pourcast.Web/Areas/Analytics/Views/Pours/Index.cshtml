@model RightpointLabs.Pourcast.Web.Areas.Analytics.Models.PoursIndexModel

@{
    ViewBag.Title = "Pours Analytics";
}
<h2>Pour Analytics over the past 28 days</h2>

<div class="row">
    <div class="col-lg-6">
        <h3>By Day of week</h3>
        <canvas id="byDay" height="500"></canvas>
    </div>
    <div class="col-lg-6">
        <h3>By Hour</h3>
        <canvas id="byTime" height="500"></canvas>
    </div>
    <div class="col-lg-12">
        <h3>By Day</h3>
        <canvas id="byDate" height="500"></canvas>
    </div>
    <div class="col-lg-12">
        <h3>Last Week By Hour</h3>
        <canvas id="byDayAndTime" height="500"></canvas>
    </div>
    <div class="col-lg-12">
        <h3>Last Week By Hour By Beer</h3>
        <canvas id="byDayAndTimeAndBeer" height="500"></canvas>
    </div>
</div>

@section scripts
{
    <script type="text/javascript">
        $(function() {
            var dataByDay = @Html.Raw(Json.Encode(Model.ByDay));
            var dataByTime = @Html.Raw(Json.Encode(Model.ByTime));
            var dataByDayAndTime = @Html.Raw(Json.Encode(Model.ByDayAndTime));
            var dataByDate = @Html.Raw(Json.Encode(Model.ByDate));
            var dataByDayAndTimeAndBeer = @Html.Raw(Json.Encode(Model.ByDayAndTimeAndBeer));
            var dataLastWeekBeers = @Html.Raw(Json.Encode(Model.LastWeekBeers));

            var buildChart = function(element, data, labelCallback) {
                var configData = {
                    labels: [],
                    datasets: [
                        {
                            label: "Volume",
                            fillColor: "rgba(228,80,45,0.5)",
                            strokeColor: "rgba(228,80,45,0.8)",
                            highlightFill: "rgba(228,80,45,0.75)",
                            highlightStroke: "rgba(228,80,45,1)",
                            data: []
                        },
                        {
                            label: "Count",
                            fillColor: "rgba(220,220,220,0.5)",
                            strokeColor: "rgba(220,220,220,0.8)",
                            highlightFill: "rgba(220,220,220,0.75)",
                            highlightStroke: "rgba(220,220,220,1)",
                            data: []
                        }
                    ]
                };
                $.each(data, function(ix, value) {
                    configData.labels.push(labelCallback(value));
                    configData.datasets[0].data.push(value.TotalVolume);
                    configData.datasets[1].data.push(value.Count);
                });
                var config = {
                    responsive: true,
                    maintainAspectRatio: false,
                    multiTooltipTemplate: "<%=datasetLabel%>: <%= Math.round(value*100)/100 %><%if (datasetLabel=='Volume'){%> oz<%}%>"
                };

                var ctx = document.getElementById(element).getContext("2d");
                var chart = new Chart(ctx).Line(configData, config);
                return chart;
            };

            buildChart("byDay", dataByDay, function(val) { return moment(val.Date).format("ddd"); });
            buildChart("byTime", dataByTime, function(val) { return moment(val.Date).format("h A"); });
            buildChart("byDayAndTime", dataByDayAndTime, function(val) { return moment(val.Date).format("ddd h A"); });
            buildChart("byDate", dataByDate, function(val) { return moment(val.Date).format("ddd M/D"); });

            // color conversions from http://hex2rgba.devoth.com/js/main.js

            // function for calculating 6 letters hex value
            function calculateFull(hex, opacity) {
                var r = parseInt(hex.substring(0, 2), 16);
                var g = parseInt(hex.substring(2, 4), 16);
                var b = parseInt(hex.substring(4, 6), 16);

                return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
            }

            // function for calculating 3 letters hex value
            function calculatePartial(hex, opacity) {
                var r = parseInt(hex.substring(0, 1) + hex.substring(0, 1), 16);
                var g = parseInt(hex.substring(1, 2) + hex.substring(1, 2), 16);
                var b = parseInt(hex.substring(2, 3) + hex.substring(2, 3), 16);

                return "rgba(" + r + "," + g + "," + b + "," + opacity + ")";
            }

            // main function
            function calculateWithOpacity(input, opacity) {
                var colors = { 'aliceblue': '#f0f8ff', 'antiquewhite': '#faebd7', 'aqua': '#00ffff', 'aquamarine': '#7fffd4', 'azure': '#f0ffff', 'beige': '#f5f5dc', 'bisque': '#ffe4c4', 'black': '#000000', 'blanchedalmond': '#ffebcd', 'blue': '#0000ff', 'blueviolet': '#8a2be2', 'brown': '#a52a2a', 'burlywood': '#deb887', 'cadetblue': '#5f9ea0', 'chartreuse': '#7fff00', 'chocolate': '#d2691e', 'coral': '#ff7f50', 'cornflowerblue': '#6495ed', 'cornsilk': '#fff8dc', 'crimson': '#dc143c', 'cyan': '#00ffff', 'darkblue': '#00008b', 'darkcyan': '#008b8b', 'darkgoldenrod': '#b8860b', 'darkgray': '#a9a9a9', 'darkgreen': '#006400', 'darkkhaki': '#bdb76b', 'darkmagenta': '#8b008b', 'darkolivegreen': '#556b2f', 'darkorange': '#ff8c00', 'darkorchid': '#9932cc', 'darkred': '#8b0000', 'darksalmon': '#e9967a', 'darkseagreen': '#8fbc8f', 'darkslateblue': '#483d8b', 'darkslategray': '#2f4f4f', 'darkturquoise': '#00ced1', 'darkviolet': '#9400d3', 'deeppink': '#ff1493', 'deepskyblue': '#00bfff', 'dimgray': '#696969', 'dodgerblue': '#1e90ff', 'firebrick': '#b22222', 'floralwhite': '#fffaf0', 'forestgreen': '#228b22', 'fuchsia': '#ff00ff', 'gainsboro': '#dcdcdc', 'ghostwhite': '#f8f8ff', 'gold': '#ffd700', 'goldenrod': '#daa520', 'gray': '#808080', 'green': '#008000', 'greenyellow': '#adff2f', 'honeydew': '#f0fff0', 'hotpink': '#ff69b4', "indianred ": '#cd5c5c', "indigo ": '#4b0082', 'ivory': '#fffff0', 'khaki': '#f0e68c', 'lavender': '#e6e6fa', 'lavenderblush': '#fff0f5', 'lawngreen': '#7cfc00', 'lemonchiffon': '#fffacd', 'lightblue': '#add8e6', 'lightcoral': '#f08080', 'lightcyan': '#e0ffff', 'lightgoldenrodyellow': '#fafad2', 'lightgrey': '#d3d3d3', 'lightgreen': '#90ee90', 'lightpink': '#ffb6c1', 'lightsalmon': '#ffa07a', 'lightseagreen': '#20b2aa', 'lightskyblue': '#87cefa', 'lightslategray': '#778899', 'lightsteelblue': '#b0c4de', 'lightyellow': '#ffffe0', 'lime': '#00ff00', 'limegreen': '#32cd32', 'linen': '#faf0e6', 'magenta': '#ff00ff', 'maroon': '#800000', 'mediumaquamarine': '#66cdaa', 'mediumblue': '#0000cd', 'mediumorchid': '#ba55d3', 'mediumpurple': '#9370d8', 'mediumseagreen': '#3cb371', 'mediumslateblue': '#7b68ee', 'mediumspringgreen': '#00fa9a', 'mediumturquoise': '#48d1cc', 'mediumvioletred': '#c71585', 'midnightblue': '#191970', 'mintcream': '#f5fffa', 'mistyrose': '#ffe4e1', 'moccasin': '#ffe4b5', 'navajowhite': '#ffdead', 'navy': '#000080', 'oldlace': '#fdf5e6', 'olive': '#808000', 'olivedrab': '#6b8e23', 'orange': '#ffa500', 'orangered': '#ff4500', 'orchid': '#da70d6', 'palegoldenrod': '#eee8aa', 'palegreen': '#98fb98', 'paleturquoise': '#afeeee', 'palevioletred': '#d87093', 'papayawhip': '#ffefd5', 'peachpuff': '#ffdab9', 'peru': '#cd853f', 'pink': '#ffc0cb', 'plum': '#dda0dd', 'powderblue': '#b0e0e6', 'purple': '#800080', 'red': '#ff0000', 'rosybrown': '#bc8f8f', 'royalblue': '#4169e1', 'saddlebrown': '#8b4513', 'salmon': '#fa8072', 'sandybrown': '#f4a460', 'seagreen': '#2e8b57', 'seashell': '#fff5ee', 'sienna': '#a0522d', 'silver': '#c0c0c0', 'skyblue': '#87ceeb', 'slateblue': '#6a5acd', 'slategray': '#708090', 'snow': '#fffafa', 'springgreen': '#00ff7f', 'steelblue': '#4682b4', 'tan': '#d2b48c', 'teal': '#008080', 'thistle': '#d8bfd8', 'tomato': '#ff6347', 'turquoise': '#40e0d0', 'violet': '#ee82ee', 'wheat': '#f5deb3', 'white': '#ffffff', 'whitesmoke': '#f5f5f5', 'yellow': '#ffff00', 'yellowgreen': '#9acd32' };

                // if sent_hex is a proper color name (check: http://www.w3.org/TR/css3-color/#html4
                // and http://www.w3.org/TR/css3-color/#svg-color for more info)
                if (colors.hasOwnProperty(input)) {
                    // strip # from HEX
                    return calculateFull(colors[input].substr(1), opacity);

                    // if sent_hex is not a proper color name check if it is a proper hex value
                    // if not - give an error message
                } else if (! input.match(/^#?([0-9A-Fa-f]){3}\s*$|^#?([0-9A-Fa-f]){6}\s*$/)) {
                    throw 'Invalid HEX value or color name';

                    // if sent_hex is a proper hex value calculate rgb and rgba
                } else {

                    // strip # from HEX
                    input = (input.charAt(0) === "#" ? input.substr(1) : input);
                    // check if 6 letters are provided
                    if (input.length === 6) {
                        return calculateFull(input, opacity);
                    } else if (input.length === 3) {
                        return calculatePartial(input, opacity);
                    }
                }
                return null;
            }

            function buildBeerChart(element, beers, data, labelCallback) {
                var configData = {
                    labels: [],
                    datasets: []
                };
                var idToIx = {};
                $.each(beers, function(ix, value) {
                    idToIx[value.Beer.Id] = ix;
                    configData.datasets.push({
                        label: value.Beer.Name,
                        fillColor: calculateWithOpacity(value.BeerStyle.Color, 0.5),
                        strokeColor: calculateWithOpacity(value.BeerStyle.Color, 0.8),
                        data: []
                    });
                });

                $.each(data, function(ix, value) {
                    configData.labels.push(labelCallback(value));
                    $.each(beers, function(ix2, value2) {
                        configData.datasets[ix2].data.push(value.Beers[value2.Beer.Id] || 0);
                    });
                });
                var config = {
                    responsive: true,
                    maintainAspectRatio: false,
                    multiTooltipTemplate: "<%=datasetLabel%>: <%= Math.round(value*100)/100 %> oz"
                };

                var ctx = document.getElementById(element).getContext("2d");
                var chart = new Chart(ctx).Line(configData, config);
                return chart;
            }
            
            buildBeerChart("byDayAndTimeAndBeer", dataLastWeekBeers, dataByDayAndTimeAndBeer, function(val) { return moment(val.Date).format("ddd M/D"); });
        });
    </script>
}